#!/usr/bin/env python3

import sys
import argparse
import base64
import hmac
import struct
import time
import os
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import pyotp

def generateBasekey(basetext):
    """GENERATE AN ENCRYPTED FILE TAHTA STORES YOUR SECRET"""
    global password
    global kdf
    key = ''
    try:
        with open(str(basetext), 'rb') as infile:
            key_lines = infile.read().decode()
            for k in key_lines:
                if k in ("\n", "\r"):
                    continue
                if not k.upper() in "0123456789ABCDEF":
                    print("ERROR: Not hex file.")
                    return
                key += ''.join(k)
            if len(key) < 64:
                print("ERROR: Base key must have exactly 64 characters.")
                return
    except:
        key = str(basetext)
        print("AQUI", key)
        if len(key) < 64:
            print("ERROR: Base key must have exactly 64 characters.")
            return
    keyhex = key.encode()
    keystr = base64.urlsafe_b64encode(kdf.derive(password.encode()))
    f = Fernet(keystr)
    encrypted = f.encrypt(keyhex)
    with open("ft_otp.key", 'wb') as filekey:
        filekey.write(encrypted)
    print("Key was successfully saved in ft_otp.key")

def generateTOTP(key_file):
    """GENERATE AN TOTP FOR THE ENCRYPTED SECRET"""
    global kdf
    global password
    try:
        with open(key_file, 'rb') as read_file:
            decrypted = read_file.read()
    except:
        print("ERROR: File name incorret or corrupted.")
        return
    try:
        keystr = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        f = Fernet(keystr)
        result = f.decrypt(decrypted)
    except:
        print("ERROR: Wrong password.")
        return
    result = bytes.fromhex(result.decode()).decode("ASCII")
    timesys = int(time.time() / 30)
    counter = timesys.to_bytes(8, byteorder="big")
    mac = hmac.new(result.encode(), counter, 'sha1')
    offset = mac.digest()[-1] & 0x0f
    binary = struct.unpack('>L', mac.digest()[offset:offset+4])[0] & 0x7fffffff
    keyotp = str(binary)[-6:].zfill(6)
    print(keyotp)

if __name__ == '__main__':
    if len(sys.argv) == 3:
        parser = argparse.ArgumentParser(description='Generate keys Time-Based One-Time Password Algorithm')
        parser.add_argument('-g', '--gen', type=str, help='Flag to generate new keys with time system')
        parser.add_argument('-k', '--key', type=str, help='Root to store the new base key encripted')
        args = parser.parse_args()
        global password
        global kdf
        #password = input("What is the password to encrypt your secret password? ") #HABILITATE THIS LINE TO INPUT A PASSWORD
        password = "Nano2023" #INHABILITATE THIS LINE FOR A FIX PASSWORD
        salt = b"\xa8\xc8\xd71\xd71hA\x06Q\x8e'=\x93\xb2q"
        kdf = PBKDF2HMAC(
            algorithm = hashes.SHA256(),
            length = 32,
            salt = salt,
            iterations = 390000)
        if args.gen:
            generateBasekey(args.gen)
        elif args.key:
            generateTOTP(args.key)
    else:
        print("ERROR: Invalid arguments.")



